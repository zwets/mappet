#!/bin/sh
#
#  mappet - mapped alignment excision tool
#  Copyright (C) 2017  Marco van Zwetselaar <io@zwets.it>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  Homed at https://github.com/zwets/mappet

### NOTICE
### The Picard and GATK steps have been commented out for the reason
### that these tools have non-free licences

# Prepare for cleanup when aborting

set -e
trap cleanup EXIT
RETVAL=1

# Function to emit information to standard error if VERBOSE is set
emit() {
    [ -z "$VERBOSE" ] || echo "$(basename "$0"): $*" >&2 || true
}

# Function to exit this script with an error message on stderr
err_exit() {
    echo "$(basename "$0"): $*" >&2
    exit 1
}

# Function to cleanup at exit, trapped on EXIT
cleanup() {
    [ -n "$KEEP" ] || [ -z "$OUTDIR" ] || [ ! -d "$OUTDIR" ] || {
        emit "clean up, remove $OUTDIR"
        rm -rf "$OUTDIR"
        }
    exit $RETVAL
}

# Function either unzips file $1 to $2 or links to original
# Note that gzip need not be decompressed for zgrep or samtools
unzip_or_link() {
    local FT="$(file --mime-type "$1")"
    if [ "$FT" = "$1: application/x-xz" ]; then
        emit "unxzipping $1"
        xz -dc "$1" >"$2"
    else
        emit "linking $1"
        ln -sf "$1" "$2"
    fi
}

# Function to show usage information and exit
usage_exit() {
    echo "
Usage: $(basename $0) [OPTIONS] TARGET READS1 READS2

  Extract from paired-end READS the section matching TARGET.
  
  TARGET is a FASTA file containing a single sequence.  READS1 and READS2
  are FASTQ files with paired-end reads.  All files may optionally be
  xz or gzip compressed. Writes to stdout the FASTA consensus sequence
  resulting from mapping the READS on TARGET.

  OPTIONS
   -k, --keep        Keep intermediate output (BAM, VCF, FASTQ)
   -o, --outdir DIR  Directory for output (default ./mappet.out, implies --keep)
   -f, --force       Overwrite existing output files in DIR
   -v, --verbose     Emit progress messages to standard error

  Assumes the organism is haploid.  Contrary to what happens in 'standard'
  base calling, the consensus sequence is drawn ONLY from the READS.  TARGET
  guides the positioning of the reads but contributes no base content.
"
    exit ${1:-1}
}

# Parse options

unset KEEP OUTDIR FORCE VERBOSE
while [ $# -ne 0 -a "$(expr "$1" : '\(.\).*')" = "-" ]; do
    case $1 in
    -k|--keep)
        KEEP=1
        ;;
    --outdir=*)
        OUTDIR="${1#--outdir=}"
        KEEP=1
        ;;
    -o|--outdir)
        shift
        OUTDIR="$1"
        KEEP=1
        ;;
    -f|--force)
        FORCE=1
        ;;
    -v|--verbose)
        VERBOSE=1
        ;;
    -h|--help)
        usage_exit 0
        ;;
    *) usage_exit
        ;;
    esac
    shift
done

# Check the arguments

[ $# -eq 3 ] || usage_exit

TARGET_FILE="$(realpath -e "$1" || err_exit "file not found: $1")"
READS1_FILE="$(realpath -e "$2" || err_exit "file not found: $2")"
READS2_FILE="$(realpath -e "$3" || err_exit "file not found: $3")"
shift 3

[ $(zgrep '^>' "$TARGET_FILE" | wc -l) -eq 1 ] || err_exit "file must have one sequence: $TARGET_FILE"

if [ -z "$OUTDIR" ]; then
    if [ -n "$KEEP" ]; then
        OUTDIR="$(realpath -e "$PWD")/mappet.out"
    else
        OUTDIR="/tmp/mappet.out.$$"
    fi
fi

[ ! -d "$OUTDIR" ] || [ -n "$FORCE" ] || err_exit "directory exists (--force to overwrite): $OUTDIR"

# Check availability of the tools

for P in zgrep bwa samtools bcftools /usr/share/samtools/vcfutils.pl fastq-unbreak fastq-to-fasta; do # picard-tools gatk; do
    which "$P" > /dev/null || err_exit "required program not present: $P"
done

# Make and change to OUTDIR

emit "creating working directory: $OUTDIR"
mkdir -p "$OUTDIR"

ORIG_PWD="$PWD"
cd "$OUTDIR"

# Pull in (links to) the input files

unzip_or_link "$TARGET_FILE" 'target.fa'
unzip_or_link "$READS1_FILE" 'reads1.fq'
unzip_or_link "$READS2_FILE" 'reads2.fq'

emit "bwa indexing the target file"
bwa index 'target.fa'

#emit "creating dictionary"
#rm -f target.dict 
#picard-tools CreateSequenceDictionary REFERENCE=target.fasta

emit "mapping reads on target"
bwa mem -R "@RG\tID:FLOWCELL1.LANE1\tPL:ILLUMINA\tLB:mappet\tSM:sample" -t $(nproc) 'target.fa' 'reads1.fq' 'reads2.fq' |
samtools view -bS -F 0x04 - |
samtools sort -@ $(nproc) -f - 'mapping.bam'
#samtools sort -@ $(nproc) -f - 'mapping.prededupe.bam'

#emit "marking duplicates"
#picard-tools MarkDuplicates M='dup-metrics.txt' I='mapping.prededupe.bam' O='mapping.bam'
#rm mapping.prededupe.bam

emit "indexing the target file"
samtools faidx 'target.fa'

emit "indexing bam file"
samtools index 'mapping.bam'

## Using gatk
## java -jar GenomeAnalysisTK.jar -R hg19.fa -T HaplotypeCaller -I sample.bam -o sample.vcf
## Look at its GVCF mode, in particular NON-REF allele and non-reference confidence model
## java -jar GenomeAnalysisTK.jar -R hg19.fa -T FastaAlternateReferenceMaker -o sample.fa --variant sample.vcf

#emit "create realignment targets"
#gatk -T RealignerTargetCreator -R target.fa -I mapping.bam -o targetintervals.list
#emit "perform indel realignment"
##gatk -T IndelRealigner -R PA01.fna -I mapping.bam -targetIntervals targetintervals.list -o realigned.bam
#gatk -T IndelRealigner -R target.fa -I mapping.bam -targetIntervals targetintervals.list -o realigned.bam
#emit "call variants"
#gatk -T HaplotypeCaller -R target.fa -I realigned.bam -ploidy 1 -stand_call_conf 30 -o raw.vcf

#emit "call variants"
#gatk -T HaplotypeCaller -R target.fa -I mapping.bam -ploidy 1 -stand_call_conf 30 -o raw.vcf
#gatk -T HaplotypeCaller -R target.fa -I mapping.bam -newQual -stand_call_conf 20 -ploidy 1 -o gatk.vcf

emit "making sample and priors file"
printf "sample\t1\n" > 'samples.list'
printf "[afs] 0:1 1:1000000\n" > 'prior.afs'

emit "calling variants"
samtools mpileup -E -uf 'target.fa' 'mapping.bam' | 
bcftools view -cg -s 'samples.list' -P 'prior.afs' - > 'result.vcf' 2> 'posterior.afs'

/usr/share/samtools/vcfutils.pl vcf2fq 'result.vcf' | 
fastq-unbreak | 
tee 'result.fastq' |
fastq-to-fasta > 'result.fasta'

RETVAL=0

# vim: sts=4:sw=4:ai:si:et:
