#!/bin/sh
#
#  mappet - mapped alignment excision tool
#  Copyright (C) 2017  Marco van Zwetselaar <io@zwets.it>
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#  Homed at https://github.com/zwets/mappet

### NOTICE
### The Picard and GATK steps have been commented out for the reason
### that these tools have non-free licences

# Prepare for cleanup when aborting

set -e
trap cleanup EXIT
RETVAL=1

# Function to emit information to standard error if VERBOSE is set
emit() {
    [ -z "$VERBOSE" ] || echo "$(basename "$0"): $*" >&2 || true
}

# Function to exit this script with an error message on stderr
err_exit() {
    echo "$(basename "$0"): $*" >&2
    exit 1
}

# Function to cleanup at exit, trapped on EXIT
cleanup() {
    [ -n "$KEEP" ] || [ -z "$OUTDIR" ] || [ ! -d "$OUTDIR" ] || {
        emit "clean up, remove $OUTDIR"
        rm -rf "$OUTDIR"
        }
    exit $RETVAL
}

# Wrapper to isolate from the breaking option change to samtools
# Reads from stdin, writes to file $1
samtools_sort_into() {
    if samtools --version-only >/dev/null 2>&1; then # new version, probably
        samtools sort -@ $(nproc) -o "$1"
    else
        samtools sort -@ $(nproc) -f - "$1"
    fi
}

# Function to show usage information and exit
usage_exit() {
    echo "
Usage: $(basename $0) [OPTIONS] TARGET READS1 READS2

  Extract from paired-end READS the section matching TARGET.
 
  TARGET is a FASTA file containing a single sequence.  READS1 and READS2
  are FASTQ files with paired-end reads.  All files may optionally be gzip
  compressed.

  Writes to stdout the FASTA consensus sequence resulting from mapping the
  READS on TARGET.

  OPTIONS
   -k, --keep        Keep intermediate output (BAM, VCF, FASTQ)
   -o, --outdir DIR  Directory for output (default ./mappet.out, implies --keep)
   -f, --force       Overwrite existing output files in DIR
   -v, --verbose     Emit progress messages to standard error

  Assumes the organism is haploid.  The consensus sequence is drawn only from
  the READS; TARGET contributes no base content.
"
    exit ${1:-1}
}

# Parse options

unset KEEP OUTDIR FORCE VERBOSE
while [ $# -ne 0 -a "$(expr "$1" : '\(.\).*')" = "-" ]; do
    case $1 in
    -k|--keep) KEEP=1 ;;
    --outdir=*) OUTDIR="${1#--outdir=}"; KEEP=1 ;;
    -o|--outdir) shift || usage_exit; OUTDIR="$1"; KEEP=1 ;;
    -f|--force) FORCE=1 ;;
    -v|--verbose) VERBOSE=1 ;;
    -h|--help) usage_exit 0 ;;
    *) usage_exit ;;
    esac
    shift
done

# Check the arguments

[ $# -eq 3 ] || usage_exit

TARGET_FILE="$(realpath -e "$1" || err_exit "file not found: $1")"
READS1_FILE="$(realpath -e "$2" || err_exit "file not found: $2")"
READS2_FILE="$(realpath -e "$3" || err_exit "file not found: $3")"
shift 3

[ $(zgrep '^>' "$TARGET_FILE" | wc -l) -eq 1 ] || err_exit "file must have one sequence: $TARGET_FILE"

if [ -z "$OUTDIR" ]; then
    if [ -n "$KEEP" ]; then
        OUTDIR="$(realpath -e "$PWD")/mappet.out"
    else
        OUTDIR="/tmp/mappet.out.$$"
    fi
fi

[ ! -d "$OUTDIR" ] || [ -n "$FORCE" ] || err_exit "directory exists (--force to overwrite): $OUTDIR"

# Check availability of the tools
for P in zgrep bwa samtools bcftools tabix; do # picard-tools gatk fastq-unbreak fastq-to-fasta; do
    which "$P" > /dev/null || err_exit "required program not present: $P"
done

# Make and change to OUTDIR
emit "creating working directory: $OUTDIR"
mkdir -p "$OUTDIR"
cd "$OUTDIR"

# Unzip reference, bwa index choke on gzip
(gzip -dc "$TARGET_FILE" 2>/dev/null || cat "$TARGET_FILE") >'target.fa'

# Link in the reads, bwa mem is cool with gzipped
ln -sfT "$READS1_FILE" 'reads1.fq'
ln -sfT "$READS2_FILE" 'reads2.fq'

# Do the thing

emit "bwa indexing the target file"
bwa index 'target.fa'

emit "mapping reads on target"
bwa mem -t $(nproc) 'target.fa' 'reads1.fq' 'reads2.fq' |
samtools view -bS -F 0x04 - |
samtools_sort_into 'mapping.bam'

emit "indexing the target file"
samtools faidx 'target.fa'

emit "indexing bam file"
samtools index 'mapping.bam'

emit "calling variants"
bcftools mpileup -Ou -f target.fa mapping.bam 2>>err.log |
bcftools call -m --ploidy 1 -P 0.01 -Oz -o result.vcf.gz

emit "calling consensus"
tabix result.vcf.gz
cat target.fa | bcftools consensus result.vcf.gz |
tee result.fa

RETVAL=0

# vim: sts=4:sw=4:ai:si:et:
